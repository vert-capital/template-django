"""
Django settings for conf project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta

from decouple import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "24&j7yo7)tm=l2v(&4b5349$*8y6elu8^7c(v0tb3a7seg^%5e"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)
DEBUG_TOOLBAR = config("DEBUG_TOOLBAR", default=DEBUG, cast=bool)
LOCAL_ENV = config("LOCAL_ENV", default=True, cast=bool)

ALLOWED_HOSTS = ["*"]

if DEBUG_TOOLBAR:
    INTERNAL_IPS = type(str("c"), (), {"__contains__": lambda *a: True})()

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third-party apps
    "django_cas_ng",
    "rest_framework",
    "django_q",
    "django_filters",
    "debug_toolbar",
    "factory_generator",
    "corsheaders",
    "django_kafka",
    # my apps
    "apps.main",
    "apps.user",
]

AUTH_USER_MODEL = "user.User"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django_cas_ng.middleware.CASMiddleware",
]

ROOT_URLCONF = "conf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "conf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": config("POSTGRES_DB"),
        "USER": config("POSTGRES_USER"),
        "PASSWORD": config("POSTGRES_PASSWORD"),
        "HOST": config("POSTGRES_HOST"),
        "PORT": config("POSTGRES_PORT"),
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "pt-br"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static_collected")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

####
# STORAGES
###


if not LOCAL_ENV:

    AWS_QUERYSTRING_AUTH = False

    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", None)
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", None)
    AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", None)
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }

    STORAGES = {
        "default": {
            "BACKEND": "conf.storage_backends.PublicMediaStorage",
        },
        "staticfiles": {
            "BACKEND": "conf.storage_backends.StaticStorage",
        },
    }

    AWS_LOCATION = config("AWS_LOCATION", "")

    AWS_STATIC_LOCATION = f"{AWS_LOCATION}static/"
    AWS_PUBLIC_MEDIA_LOCATION = f"{AWS_LOCATION}media/"
    AWS_PRIVATE_MEDIA_LOCATION = f"{AWS_LOCATION}private/"
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "COERCE_DECIMAL_TO_STRING": False,
}

JWT_AUTH = {
    "JWT_VERIFY_EXPIRATION": False,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(weeks=120),
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("JWT",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "email",
    "USER_ID_CLAIM": "email",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}


####
# JWT
###


DATA_UPLOAD_MAX_NUMBER_FIELDS = 8000

# Email


DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="noreply@test.com")
EMAIL_HOST = config("EMAIL_HOST", default="mail")
EMAIL_PORT = config("EMAIL_PORT", default=1025, cast=int)
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="", cast=str)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="", cast=str)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=False, cast=bool)


####
# CLUSTER
###

Q_CLUSTER = {
    "name": "cluster",
    "workers": 2,
    "timeout": 60 * 60 * 24,  # 1 day
    "retry": 60 * 60 * 24 + 5,  # 1 day 5 seconds
    "orm": "default",
}


####
# CACHES
###

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "django_cache_table",
    }
}


####
# THUMBNAILS
###

THUMBNAIL_ALIASES = {
    "": {
        "default": {"size": (300, 300), "crop": True},
    },
}


####
# EMAIL
###

EMAIL_FROM = config("EMAIL_FROM", default="test@test.com")

# FACTORY GENERATE

FACTORY_ONLY_APPS = [
    "main",
    "user",
]

FACTORY_IGNORE_INIT_IMPORT = True

FACTORY_NORMALIZE_FIELD_MAP = {
    "JSONField": "TextField",
    "EmailField": "TextField",
}

# Django Cors
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = False

# KAFKA
KAFKA_BOOTSTRAP_SERVER: str = config(
    "KAFKA_BOOTSTRAP_SERVER", cast=str, default="kafka:9092"
)
KAFKA_CLIENT_ID: str = config("KAFKA_CLIENT_ID", cast=str, default="kafka-python")
KAFKA_GROUP_ID: str = config("KAFKA_GROUP_ID", cast=str, default="kafka-python")
KAFKA_TOPICS = {
    "vertc-user": "apps.user.kafka_consumer.user_consumer",
}


####
# SSO
###

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "django_cas_ng.backends.CASBackend",
)

CAS_SERVER_URL = config(
    "CAS_SERVER_URL", default="https://id-vertc-stg.ageriservicos.com.br/cas/"
)

CAS_CHECK_NEXT = False

URL_CAS_SERVER_URL = CAS_SERVER_URL.replace("/cas/", "/")

FRONTEND_AUTH_REDIRECT = config(
    "FRONTEND_AUTH_REDIRECT", default="http://localhost:8000/auth"
)

if config("APM_SERVER_URL", None):
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "elasticapm": {
                "level": "WARNING",
                "class": "elasticapm.contrib.django.handlers.LoggingHandler",
            },
            "console": {
                "level": "DEBUG",
                "class": "logging.StreamHandler",
            },
        },
        "loggers": {
            "django-q": {
                "handlers": ["elasticapm"],
                "level": "ERROR",
            },
        },
    }


ELASTIC_APM = {
    # Set the required service name. Allowed characters:
    # a-z, A-Z, 0-9, -, _, and space
    "SERVICE_NAME": config("APM_APP_NAME", None),
    # Use if APM Server requires a secret token
    "SECRET_TOKEN": config("APM_TOKEN", None),
    # Set the custom APM Server URL (default: http://localhost:8200)
    "SERVER_URL": config("APM_SERVER_URL", None),
    # Set the service environment
    "ENVIRONMENT": config("APM_ENVIROMENT", None),
    # Set log level
    "ELASTIC_APM_LOG_LEVEL": config("APM_LOG_LEVEL", "info"),
}
